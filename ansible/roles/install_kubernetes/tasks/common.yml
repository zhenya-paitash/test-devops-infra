---
# Common tasks for all nodes

- name: Prepare nodes for Kubernetes
  become: true
  block:
    - name: Ensure hostname is resolvable
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^{{ ansible_default_ipv4.address }}\s+{{ ansible_hostname }}$'
        line: "{{ ansible_default_ipv4.address }} {{ ansible_hostname }}"
        state: present


    - name: Disable swap
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0
      changed_when: false

    - name: Remove swap entry from /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^\s*[^#].*swap'
        state: absent

    - name: Load required kernel modules
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Ensure modules are loaded in current session
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set required sysctl params
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
        sysctl_file: /etc/sysctl.d/k8s.conf
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

- name: Install containerd
  become: true
  block:
    - name: Install prerequisites (Debian/Ubuntu)
      ansible.builtin.apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl']
        state: present
        update_cache: true
      when: ansible_os_family == "Debian"

    - name: Install prerequisites (Archlinux)
      ansible.builtin.pacman:
        name: ['ca-certificates', 'curl']
        state: present
        update_cache: true
      when: ansible_os_family == "Archlinux"

    - name: Install containerd package
      ansible.builtin.package:
        name: "{{ 'containerd.io' if ansible_os_family == 'Debian' else 'containerd' }}"
        state: present

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory

    - name: Ensure old containerd config is removed
      become: true
      ansible.builtin.file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Generate default containerd config and apply modifications
      become: true
      ansible.builtin.shell: |
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        sed -i 's/disabled_plugins = \["cri"\]/#disabled_plugins = \["cri"\]/' /etc/containerd/config.toml
      changed_when: true
      notify: Restart containerd

- name: Install Kubernetes components
  become: true
  block:
    - name: Add Kubernetes APT GPG key (Debian)
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kube_version.split('.')[0] }}.{{ kube_version.split('.')[1] }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Add Kubernetes APT repository (Debian)
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version.split('.')[0] }}.{{ kube_version.split('.')[1] }}/deb/ /"
        state: present
        filename: kubernetes
      when: ansible_os_family == "Debian"

    - name: Install kubelet, kubeadm, kubectl (Debian)
      ansible.builtin.apt:
        name:
          - "kubelet={{ kube_version }}-*"
          - "kubeadm={{ kube_version }}-*"
          - "kubectl={{ kube_version }}-*"
        state: present
        update_cache: true
      when: ansible_os_family == "Debian"

    - name: Forcefully remove legacy iptables package (Archlinux)
      become: true
      ansible.builtin.command: "pacman -Rdd --noconfirm iptables"
      register: rdd_result
      changed_when: "'removing iptables' in rdd_result.stdout"
      failed_when: "rdd_result.rc != 0 and 'not found' not in rdd_result.stderr"
      when: ansible_os_family == "Archlinux"

    - name: Install kubelet, kubeadm, kubectl (Archlinux)
      become: true
      ansible.builtin.pacman:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
      when: ansible_os_family == "Archlinux"

    - name: Hold Kubernetes packages (Debian)
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == "Debian"

- name: Ensure kubelet service is running
  become: true
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    state: started
    daemon_reload: yes

- name: Ensure containerd service is running and enabled
  become: true
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: true
    daemon_reload: yes
