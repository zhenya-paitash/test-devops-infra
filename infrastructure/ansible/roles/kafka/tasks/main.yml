---
- name: Check if required variables are defined
  ansible.builtin.assert:
    that:
      - kafka_node_id is defined
      - kafka_opts | type_debug == "list" or kafka_opts | type_debug == "AnsibleUnicode"

- name: Update apt cache
  become: true
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian" and kafka_install_dependencies | bool

  # acl package is required to set correct permissions when using become_user
- name: Install acl package
  become: true
  ansible.builtin.package:
    name: acl
    state: present
  when: kafka_install_dependencies | bool and ansible_os_family == "Debian"

- name: Install java
  become: true
  ansible.builtin.package:
    name: "{{ kafka__dependencies }}"
    state: present
  when: kafka_install_dependencies | bool

- name: Ensure Kafka group exists
  become: true
  ansible.builtin.group:
    name: "{{ kafka_user_group }}"
    state: present
    system: true

- name: Ensure Kafka user exists
  become: true
  ansible.builtin.user:
    name: "{{ kafka_user }}"
    state: present
    system: true
    group: "{{ kafka_user_group }}"
    home: "{{ kafka_home }}"
    createhome: false

- name: Get checksum
  ansible.builtin.uri:
    url: https://downloads.apache.org/kafka/{{ kafka_version }}/kafka_{{ kafka_scala_version }}-{{ kafka_version }}.tgz.sha512
    return_content: true
  retries: 3
  delay: 3
  register: kafka__reg_checksum
  run_once: true
  when: kafka_checksum is not defined

- name: Set checksum
  ansible.builtin.set_fact:
    kafka_checksum: "{{ kafka__reg_checksum.content \
      | replace('\n', '') \
      | regex_replace('\\s{2,}', ' ') \
      | replace('kafka_' + kafka_scala_version | string + '-' + kafka_version | string + '.tgz: ', 'sha512:') }}"
  when: kafka_checksum is not defined

- name: Download Kafka
  become: true
  ansible.builtin.get_url:
    url: "{{ kafka__download_url }}"
    checksum: "{{ kafka_checksum }}"
    dest: "{{ kafka__download_destination }}"
    mode: "0644"
    timeout: 30
  retries: 3
  delay: 3

- name: Unpack Kafka
  become: true
  ansible.builtin.unarchive:
    src: "{{ kafka__download_destination }}"
    copy: false
    dest: "{{ kafka_download_directory }}"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user_group }}"

- name: Configure Kafka symlink
  become: true
  ansible.builtin.file:
    path: "{{ kafka_home }}"
    src: "{{ kafka_download_directory }}/kafka_{{ kafka_scala_version }}-{{ kafka_version }}"
    state: link
    force: true
    follow: false

- name: Create Kafka data and log directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user_group }}"
    mode: "0750"
  loop: "{{ kafka_log_dirs + [kafka_log_directory] }}"

- name: Directing Kafka service logs to /var/log
  become: true
  ansible.builtin.file:
    path: "{{ kafka_home }}/logs"
    src: "{{ kafka_log_directory }}"
    state: link

- name: Ensure sysconfig directory exists
  become: true
  ansible.builtin.file:
    path: /etc/sysconfig
    state: directory
    mode: "0755"

- name: Configure kafka heap size
  become: true
  ansible.builtin.lineinfile:
    regexp: "^KAFKA_HEAP_OPTS"
    line: KAFKA_HEAP_OPTS="-Xmx{{ kafka_heap_size }} -Xms{{ kafka_heap_size }}"
    dest: /etc/sysconfig/kafka
    mode: "0644"
    create: true
  notify: Restart Kafka

- name: Configure kafka opts
  become: true
  ansible.builtin.lineinfile:
    regexp: "^KAFKA_OPTS"
    line: KAFKA_OPTS="{{ kafka__opts }}"
    dest: /etc/sysconfig/kafka
    mode: "0644"
    create: true
  notify: Restart Kafka

- name: Install Kafka service definition
  become: true
  ansible.builtin.template:
    src: kafka.service.j2
    dest: /usr/lib/systemd/system/kafka.service
    mode: "0644"
  notify: Restart Kafka

- name: Add controller nodes to group
  ansible.builtin.add_host:
    name: "{{ hostvars[item]['inventory_hostname'] }}"
    group: kafka__group_controller_nodes
  when: "'controller' in hostvars[item]['kafka_node_roles'] | default(kafka_node_roles)"
  loop: "{{ ansible_play_hosts }}"
  changed_when: false
  loop_control:
    label: "{{ hostvars[item]['inventory_hostname'] }}"

- name: Add broker nodes to group
  ansible.builtin.add_host:
    name: "{{ hostvars[item]['inventory_hostname'] }}"
    group: kafka__group_broker_nodes
  when: "'broker' in hostvars[item]['kafka_node_roles'] | default(kafka_node_roles)"
  loop: "{{ ansible_play_hosts }}"
  changed_when: false
  loop_control:
    label: "{{ hostvars[item]['inventory_hostname'] }}"

- name: Configure Kafka
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.template:
    src: server.properties.j2
    dest: "{{ kafka__config_path }}"
    mode: "0644"
  notify: Restart Kafka

- name: Check if data directory is formatted
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.stat:
    path: "{{ item }}/meta.properties"
  register: kafka__reg_check_if_formatted
  loop: "{{ kafka_log_dirs }}"

- name: Check if cluster uuid lock file exists
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.stat:
    path: "{{ kafka__uuid_file }}"
  register: kafka__reg_check_uuid_file
  delegate_to: "{{ groups['kafka__group_controller_nodes'] | first }}"
  run_once: true

- name: Create cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: "{{ kafka_home }}/bin/kafka-storage.sh random-uuid"
  register: kafka__reg_storage_random_uuid
  changed_when: true
  delegate_to: "{{ groups['kafka__group_controller_nodes'] | first }}"
  when: not kafka__reg_check_uuid_file.stat.exists
  run_once: true

- name: Write cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.copy:
    content: "{{ kafka__reg_storage_random_uuid.stdout }}"
    dest: "{{ kafka__uuid_file }}"
    mode: "0444"
  when: not kafka__reg_check_uuid_file.stat.exists and inventory_hostname in groups["kafka__group_controller_nodes"]

- name: Get cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: cat {{ kafka__uuid_file }}
  delegate_to: "{{ groups['kafka__group_controller_nodes'] | first }}"
  register: kafka__reg_cluster_uuid
  changed_when: false
  run_once: true

- name: Set cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.set_fact:
    kafka_cluster_id: "{{ kafka__reg_cluster_uuid.stdout }}"

- name: Format kafka log directory
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: >
      {{ kafka_home }}/bin/kafka-storage.sh format
      --config {{ kafka__config_path }}
      --cluster-id {{ kafka_cluster_id }}
  changed_when: true
  when: not kafka__reg_check_if_formatted.results[0].stat.exists

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure Kafka service is enabled and started
  become: true
  ansible.builtin.systemd:
    name: kafka
    enabled: true
    state: started
    daemon_reload: true
  retries: 3
  delay: 2

- name: Wait for Kafka controllers to start
  ansible.builtin.wait_for:
    port: 9093
    timeout: 30
  when: inventory_hostname in groups["kafka__group_controller_nodes"]

- name: Wait for Kafka brokers to start
  ansible.builtin.wait_for:
    port: 9092
    timeout: 30
  when: inventory_hostname in groups["kafka__group_broker_nodes"]

- name: Fetch Kafka topics
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: "{{ kafka_home }}/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"
  register: kafka__reg_topics
  changed_when: false
  check_mode: false
  delegate_to: "{{ groups['kafka__group_broker_nodes'] | first }}"
  run_once: true

- name: Create kafka topics
  ansible.builtin.command:
    cmd: >
      {{ kafka_home }}/bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --topic {{ item.name }}
      --partitions {{ item.partitions | default(1) }}
      --replication-factor {{ item.replication_factor | default(1) }}
      {% for k, v in item.config | default({}) | dictsort %}
      --config {{ k | replace("_", ".") }}={{ v }}
      {% endfor %}
  when: item.name not in kafka__reg_topics.stdout_lines
  loop: "{{ kafka_topics }}"
  changed_when: true
  delegate_to: "{{ groups['kafka__group_broker_nodes'] | first }}"
  run_once: true
  loop_control:
    label: "{{ item.name }}"

# - name: Check number of partitions per topic
#   ansible.builtin.shell: >
#     set -o pipefail &&
#     /opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092
#     --describe --topic {{ item.name }} | grep -Po "(?<=PartitionCount:)\s*\d{1,}" | sed -r "s/\s*//"
#   loop: "{{ kafka_topics }}"
#   loop_control:
#     label: "{{ item.name }}"
#   register: kafka__reg_topic_partitions
#   changed_when: false
#   check_mode: false
#   run_once: true
#   when: kafka_update_partition_count | bool

# - name: Create list of dictionary with topics and number of partitions
#   ansible.builtin.set_fact:
#     kafka__reg_topic_partitions_set: "{{ kafka__reg_topic_partitions_set | default([]) + [{'name': item.item.name, 'partitions': item.stdout}] }}"
#   changed_when: false
#   loop: "{{ kafka__reg_topic_partitions.results }}"
#   loop_control:
#     label: "{{ item.item.name }}"
#   run_once: true
#   when: kafka_update_partition_count | bool

# - name: Increase number of partitions for underpartitionded topic
#   ansible.builtin.command: /opt/kafka/bin/kafka-topics.sh --alter --zookeeper localhost:2181 --topic {{ item.0.name }} --partitions {{ item.0.partitions }}
#   when: item.0.partitions | default(12) | int < item.1.partitions | int and item.0.partitions is defined and kafka_update_partition_count | bool
#   loop: "{{ kafka_topics | zip(kafka__reg_topic_partitions_set | default([])) | list }}"
