---
# Tasks for control-plane node

- name: Perform network cleanup
  ansible.builtin.include_tasks: network-cleanup.yml

- name: Ensure container runtime and kubelet are running
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - containerd
    - kubelet

- name: Initialize the Kubernetes cluster
  become: true
  ansible.builtin.command: "kubeadm init --pod-network-cidr={{ pod_network_cidr }} --upload-certs"
  args:
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == groups['master_nodes'][0]

- name: Set up kubeconfig for ansible user
  become: true
  block:
    - name: Create .kube directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user's kubeconfig
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
  when: inventory_hostname == groups['master_nodes'][0]

- name: Install CNI plugin (Flannel)
  ansible.builtin.command: "kubectl apply -f {{ cni_plugin_manifest_url }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: inventory_hostname == groups['master_nodes'][0]
  changed_when: true

- name: Generate join command
  ansible.builtin.command: kubeadm token create --print-join-command
  register: join_command_raw
  when: inventory_hostname == groups['master_nodes'][0]
  changed_when: true

- name: Store join command for worker nodes
  ansible.builtin.copy:
    content: "{{ join_command_raw.stdout }}"
    dest: /tmp/kubeadm_join_command.sh
    mode: '0755'
  when: inventory_hostname == groups['master_nodes'][0]

- name: Check for control-plane taint
  become: true
  ansible.builtin.command: "kubectl get node {{ ansible_hostname | lower }} -o jsonpath='{.spec.taints}'"
  register: node_taints
  changed_when: false
  when: inventory_hostname == groups['master_nodes'][0]
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Remove taint from control-plane node
  become: true
  ansible.builtin.command: "kubectl taint nodes {{ ansible_hostname | lower }} node-role.kubernetes.io/control-plane:NoSchedule-"
  when:
    - inventory_hostname == groups['master_nodes'][0]
    - remove_control_plane_taint | default(true)
    - "'node-role.kubernetes.io/control-plane' in node_taints.stdout"
  changed_when: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Скачивание kubeconfig на локальную машину
  ansible.builtin.include_role:
    name: fetch_kubeconfig
  when: inventory_hostname == groups['master_nodes'][0]

- name: Install Kubernetes Apps
  block:
    - name: Install ingress-nginx
      ansible.builtin.include_tasks: apps-ingress-nginx.yml
      when: install_ingress_nginx | default(false)

    - name: Install cert-manager
      ansible.builtin.include_tasks: apps-cert-manager.yml
      when: install_cert_manager | default(false)

    - name: Install metallb
      ansible.builtin.include_tasks: apps-metallb.yml
      when: install_metallb | default(false)

    - name: Install metrics-server
      ansible.builtin.include_tasks: apps-metrics-server.yml
      when: install_metrics_server | default(false)
  when: inventory_hostname == groups['master_nodes'][0]
